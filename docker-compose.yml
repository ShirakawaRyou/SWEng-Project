# SWEng-Project-main/docker-compose.yml
version: '3.8' # 使用较新的 Compose 文件版本

services:
  backend: # 您的 FastAPI 应用服务
    build:
      context: . # Dockerfile 所在的路径 (当前目录)
      dockerfile: Dockerfile
    container_name: resumealign_backend
    ports:
      - "8000:8000" # 将主机的8000端口映射到容器的8000端口 (Gunicorn监听的端口)
    volumes:
      # 在开发时，可以将本地代码挂载到容器中以实现热重载 (如果Gunicorn/Uvicorn配置了reload)
      # 对于生产镜像，通常不挂载代码，代码已构建在镜像内
      - ./backend:/app/backend 
    environment:
      # 这些环境变量将传递给容器内的应用，config.py 会读取它们
      # 重要：不要在这里硬编码敏感信息，而是使用 .env 文件 (下面会提到)
      - MONGO_CONNECTION_STRING=mongodb://mongo_db:27017/resume_align_db_compose # 注意这里用服务名 mongo_db
      - MONGO_DATABASE_NAME=resume_align_db_compose # 与连接字符串中的数据库名一致
      - JWT_SECRET_KEY=${JWT_SECRET_KEY} # 从 .env 文件读取
      - GEMINI_API_KEY=${GEMINI_API_KEY} # 从 .env 文件读取
      # Gunicorn 环境变量 (可选，因为 gunicorn.conf.py 中有默认值)
      # - GUNICORN_WORKERS=3
      # - GUNICORN_LOGLEVEL=debug
    depends_on:
      - mongo_db # 确保 mongo_db 服务先启动 (但不保证已完全可用)
    networks:
      - resumealign_network

  mongo_db: # MongoDB 服务
    image: mongo:6.0 # 使用一个具体的 MongoDB 版本，例如 6.0 或 7.0
    container_name: resumealign_mongo
    ports:
      - "27017:27017" # 将主机的27017端口映射到容器的27017端口
    volumes:
      - mongodb_data:/data/db # 数据持久化，mongodb_data 是一个具名卷
    environment:
      # 可选：设置 MongoDB 的 root 用户和密码
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - resumealign_network

volumes: # 定义具名卷
  mongodb_data:
    driver: local

networks: # 定义自定义网络
  resumealign_network:
    driver: bridge